#!/usr/bin/env python
# coding: utf-8

# In[117]:


#get_ipython().system('pip install paho-mqtt')


# In[7]:


#get_ipython().system('pip install faker')


# In[119]:


import pandas as pd
import random
from faker import Faker
from random import uniform,randrange
from datetime import datetime
import time
import math
#pip install paho-mqtt / for mqtt testing
#pip install pycristoforo - for random lat/long within an area
#import paho.mqtt.client as mqtt
from io import StringIO 
import pandas as pd
from math import cos, sin, atan2, sqrt, radians, degrees, asin, modf
#from geographiclib.geodesic import Geodesic

import warnings
warnings.filterwarnings("ignore")

counter = 0
consumed_data = ""

def set_flag(row):
	if float(row['heartbeat']) < 60:
		return 1
	elif float(row['temperature']) > 102:
		return 1
	elif float(row['spo2']) < 90:
		return 1
	else:
		return 0

def Distance(mfr1_lat, mfr1_lon, mfr2_lat, mfr2_lon):
	# approximate radius of earth in km
	R = 6373.0

	lat1 = radians(float(mfr1_lat))
	lon1 = radians(float(mfr1_lon))
	lat2 = radians(float(mfr2_lat))
	lon2 = radians(float(mfr2_lon))

	dlon = lon2 - lon1
	dlat = lat2 - lat1
	a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
	c = 2 * atan2(sqrt(a), sqrt(1 - a))
	distance = R * c
	return distance


def getPathLength(lat1,lng1,lat2,lng2):
    '''calculates the distance between two lat, long coordinate pairs'''
    R = 6371000 # radius of earth in m
    lat1rads = radians(lat1)
    lat2rads = radians(lat2)
    deltaLat = radians((lat2-lat1))
    deltaLng = radians((lng2-lng1))
    a = sin(deltaLat/2) * sin(deltaLat/2) + cos(lat1rads) * cos(lat2rads) * sin(deltaLng/2) * sin(deltaLng/2)
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    d = R * c
    return d

def getDestinationLatLong(lat,lng,azimuth,distance):
    '''returns the lat an long of destination point 
    given the start lat, long, aziuth, and distance'''
    R = 6378.1 #Radius of the Earth in km
    brng = radians(azimuth) #Bearing is degrees converted to radians.
    d = distance/1000 #Distance m converted to km
    lat1 = radians(lat) #Current dd lat point converted to radians
    lon1 = radians(lng) #Current dd long point converted to radians
    lat2 = asin( sin(lat1) * cos(d/R) + cos(lat1)* sin(d/R)* cos(brng))
    lon2 = lon1 + atan2(sin(brng) * sin(d/R)* cos(lat1),cos(d/R)- sin(lat1)* sin(lat2))
    #convert back to degrees
    lat2 = degrees(lat2)
    lon2 = degrees(lon2)
    return[lat2, lon2]

def getStraightline(interval,azimuth,lat1,lng1,lat2,lng2):
    '''returns every coordinate pair inbetween two coordinate pairs given the desired interval'''
    coords = []
    d = getPathLength(lat1,lng1,lat2,lng2)
    remainder, dist = modf((d / interval))
    counter = 1.0
    coords.append([lat1,lng1])
    for distance in range(1,int(dist)):
        c = getDestinationLatLong(lat1,lng1,azimuth,counter)
        counter += 1.0
        coords.append(c)
    counter +=1
    coords.append([lat2,lng2])
    print("<Start> Tracking First Responder going to help: ")
    for i in coords:
    	print("Current Location: ",i)
    	time.sleep(1)
    print("<End> Reached the location on First Responder in need of help!!!")
    return coords


#def get_bearing(lat1, lat2, long1, long2):
#    brng = Geodesic.WGS84.Inverse(lat1, long1, lat2, long2)['azi1']
#    return brng

def closest(df):
	fr_needs_help = df[df['vital_drop'] == 1]
	print("First Responder who needs help --> ID :: ", fr_needs_help['FirstResponder_ID'].to_string(index=False), " ~ Location :: (",fr_needs_help['latitude'].to_string(index=False),",",fr_needs_help['longitude'].to_string(index=False),")")
	fr_others = df[df['vital_drop'] != 1]
	#print("**")
	#print(fr_others)
	#print(fr_needs_help)
	needs_help_latitude = float(fr_needs_help.loc[fr_needs_help.vital_drop == 1, 'latitude'].to_string(index=False))
	needs_help_longitude = float(fr_needs_help.loc[fr_needs_help.vital_drop == 1, 'longitude'].to_string(index=False))
	'''
	for i in range(len(fr_others)):
		print("others")
		k = fr_others.loc[i, 'latitude']
		print(k)
		#print(fr_others.loc[i, 'latitude'])
		print(r_others.loc[i, 'longitude'])
		print("#######")
	
	for ind in fr_others.index:
		k = fr_others[ind]['latitude']
		print("###")
		print(k)
	'''
	#fr_others['distance_from_fr_needing_help'] = fr_others[['latitude','longitude']].apply(lambda x: Distance(x.latitude,x.longitude,needs_help_latitude,needs_help_longitude), axis = 1)
	fr_others['distance_from_fr_needing_help'] = fr_others.apply(lambda x: Distance(x.latitude,x.longitude,needs_help_latitude,needs_help_longitude), axis = 1)
	#fr_others.loc['distance_from_fr_needing_help'] = fr_others.apply(lambda x: Distance(x.latitude,x.longitude,needs_help_latitude,needs_help_longitude), axis = 1)
	#print("Distance between other First responders and the one in distress: ",fr_others)
	#df.loc[df['B'] == 3, 'A']
	closest_mfr_id = fr_others.loc[fr_others['distance_from_fr_needing_help'] == fr_others['distance_from_fr_needing_help'].min(), 'FirstResponder_ID'].to_string(index=False)
	lend_help_latitude = float(fr_others.loc[fr_others['distance_from_fr_needing_help'] == fr_others['distance_from_fr_needing_help'].min(), 'latitude'].iloc[0])#.to_string(index=False))
	lend_help_longitude = float(fr_others.loc[fr_others['distance_from_fr_needing_help'] == fr_others['distance_from_fr_needing_help'].min(), 'longitude'].iloc[0])#.to_string(index=False))

	print("Closest First Responder who can help --> ID :: ",closest_mfr_id, " ~ Location :: (", lend_help_latitude,",",lend_help_longitude,")")#.to_string(index=False))
	
	linterval = 100
	lazimuth = 0
	llat2 = needs_help_latitude
	llng2 = needs_help_longitude
	llat1 = lend_help_latitude
	llng1 = lend_help_longitude
	#print(llat1, llng1)
	#print("2nd", llat2, "2nd",llng2)
	getStraightline(linterval,lazimuth,llat1,llng1,llat2,llng2)
	
	#print("@@@@@@@@@@@@")
	return closest_mfr_id

def stitchdata(ipmsg):
    global counter
    global consumed_data
    consumed_data += ipmsg + "\n"
    #print(consumed_data)
    counter +=1
    #print(counter)
    if (counter%3 == 0):
            df = pd.DataFrame([x.split(',') for x in consumed_data.rstrip('\n').split('\n')],columns=['current_timestamp','Disaster_ID','FirstResponder_ID','latitude','longitude','heartbeat','temperature','spo2'])
            consumed_data = ""
            #print(df)
            '''
            df['vital_drop'] = df['heartbeat'].apply(lambda x: 1 if float(x)<60 else None)
            df['vital_drop'] = df['temperature'].apply(lambda x: 1 if float(x) > 102 else None)
            df['vital_drop'] = df['spo2'].apply(lambda x: 1 if float(x) < 90 else None)
            print(df)
            '''
            df_with_flag = df.assign(vital_drop = df.apply(set_flag, axis = 1))
            #print(df_with_flag)
            #groupby_time = df.groupby('current_timestamp')
            is_vital_drop = df_with_flag.groupby('current_timestamp')['vital_drop'].max()

            #df_with_flag['is_vital_drop'] = df_with_flag['vital_drop'].eq(df_with_flag.groupby('current_timestamp').vital_drop.transform('max')).astype(int)
            '''print("***")
            print(df_with_flag)
            if (df_with_flag['is_vital_drop'] == 1):
                    print("in if")
            else:
                    pass
            #print groupby_time'''
            if 1 in df_with_flag.vital_drop.values:
                    print("**********************************************************")
                    print("ALERT! A First Responder's vitals are dropping!")
                    closest_first_responder_id = closest(df_with_flag)
                    #print(closest_first_responder_id)
                    #call fn to find closest
                    print("**********************************************************") 
            else:
                    print("**********************************************************")
                    print("No Alerts!")
                    print("**********************************************************")
                    pass

    
def generate_lat_long(lat, lon):
	radius = 0.01
	N = 20 

	circlePoints = []
	for k in range(N):
		angle = math.pi*2*k/N
		dx = radius*math.cos(angle)
		dy = radius*math.sin(angle)
		point = {}
		point['lat']= lat + (180/math.pi)*(dy/6371) #Earth Radius
		point['lon']= lon + (180/math.pi)*(dx/6371)/math.cos(lon*math.pi/180) #Earth Radius
		circlePoints.append(point)
		#print(type(point))
		#print(type(circlePoints))

	return circlePoints
# In[64]:
lat_long_center_mfr1 = [41.724600,-71.578927]
lat_long_center_mfr2 = [41.716716,-71.592586]
lat_long_center_mfr3 = [41.725880, -71.595608]

lat_long_mfr1 = generate_lat_long(lat_long_center_mfr1[0], lat_long_center_mfr1[1])
lat_long_mfr2 = generate_lat_long(lat_long_center_mfr2[0], lat_long_center_mfr2[1])
lat_long_mfr3 = generate_lat_long(lat_long_center_mfr3[0], lat_long_center_mfr3[1])

#print(lat_long_mfr1)
#print("***")
#current_timestamp,Disaster_ID,FirstResponder_ID,latitude,longitude,heartbeat,temperature,spo2
number_of_fields = 8

fake = Faker('en_US')
counter = 0
while True:
    # Create transaction date 
#    current_timestamp = datetime.datetime.now()
	current_timestamp = datetime.now()
#d2 = datetime.strptime(f'8/10/2021 23:59:59.000000', '%m/%d/%Y %H:%M:%S.%f')
	Disaster_ID = datetime.today().strftime("%d%m%Y") + "_" + "001"

	for id in ["0001","0002","0003"]:
		FirstResponder_ID = id
		if FirstResponder_ID == "0001" :
# lets keep a counter, for a  prime number send alert for distress
#else lest do based on vitals alone
#sleep for a min
			index = random.randint(0, 9)
			latitude = lat_long_mfr1[index]['lat']
			longitude = lat_long_mfr1[index]['lon']
			if (counter%3 == 0):
			#time to send drop in vitals
				heartbeat = random.randint(50,60)
				temperature = round(random.uniform(102.0,104.0),2)
				spo2 = round(random.uniform(50.0,80.0),2)
			else:
				heartbeat = random.randint(60,80)
				temperature = round(random.uniform(97.0,100.0),2)
				spo2 = round(random.uniform(95.0,100.0),2)
		else:
			if FirstResponder_ID == "0002" :
				index = random.randint(0, 9)
				latitude = lat_long_mfr2[index]['lat']
				longitude = lat_long_mfr2[index]['lon']
			else:
				index = random.randint(0, 9)
				latitude = lat_long_mfr3[index]['lat']
				longitude = lat_long_mfr3[index]['lon']
			heartbeat = random.randint(60,80)
			temperature = round(random.uniform(97.0,100.0),2)
			spo2 = round(random.uniform(95.0,100.0),2)

		sensor_data = str(current_timestamp) + ',' + str(Disaster_ID) + ',' + str(FirstResponder_ID) + ',' + str(latitude) + ',' + str(longitude) + ',' + str(heartbeat) + ',' + str(temperature) + ',' + str(spo2)  
		#print(sensor_data)
		#client.publish("mfr_poc_vitals", sensor_data)
		stitchdata(sensor_data)

	time.sleep(2)
	counter += 1
	#print(counter)
#lat long - within radius
